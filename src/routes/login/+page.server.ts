import { type Action, fail, redirect } from '@sveltejs/kit';
import { checkLoginUser, createUser } from '$lib/user';


export const actions = {
	//@ts-expect-error types not generated by svelte-kit
	login: async ({ cookies, request }) => {
		const data = await request.formData();

		const username = data.get('username');
		const password = data.get('password');

		console.log("Logging in user:", username, password);

		if(! await checkLoginUser(username, password)){
			return fail(403, { loginfail: true ,reason: 'Invalid username or password' });
		}

		cookies.set('user', username, {path: '/'});
		throw redirect(303, "/");
	},
	//@ts-expect-error types not generated by svelte-kit
	register: async ({ cookies, request }) => {
		const data = await request.formData();

		const username = data.get('username');
		const password = data.get('password');

		console.log("Registering user:", username, password);

		const success = await createUser(username, password);

		if(!success){
			return fail(403, { registerfail: true, reason: 'Username already exists' });
		}


		cookies.set('user', username, {path: '/'});

		throw redirect(303, "/");
	},
	//@ts-expect-error types not generated by svelte-kit
	logout: ({ cookies }) => {
		cookies.set('user', '', {path: '/', maxAge: 0});
		throw redirect(303, "/");
	}
} satisfies Action;